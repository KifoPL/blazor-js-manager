# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET Version Bump and Tag push

permissions:
  contents: write

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
    types: [closed]
  workflow_dispatch:
    inputs:
      bump-type:
        description: 'Version part to bump (major, minor, patch)'
        required: false
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  build:
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT_TOKEN }}
        fetch-depth: 0  # Ensure full history and tags are fetched
    - name: Fetch all tags
      run: git fetch --tags --force
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
    - name: Restore dependencies
      run: dotnet restore
      working-directory: src/BlazorJsManager
    - name: Build
      run: dotnet build --no-restore --configuration Release
      working-directory: src/BlazorJsManager
    - name: Test
      run: dotnet test --no-build --configuration Release --logger "trx;LogFileName=test_results.trx" --results-directory TestResults
      working-directory: src/BlazorJsManager
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: src/BlazorJsManager/TestResults/
    - name: Bump version
      id: bump_version
      run: |
        set -e
        PROJECT_FILE=$(find ./src -name '*.csproj' -print -quit)
        if [ -z "$PROJECT_FILE" ]; then
          echo "No .csproj file found!" >&2
          exit 1
        fi
        VERSION_LINE=$(grep '<Version>' "$PROJECT_FILE" || echo '')
        if [ -z "$VERSION_LINE" ]; then
          VERSION="0.1.0"
        else
          VERSION=$(echo "$VERSION_LINE" | grep -oP '<Version>\K[^<]+')
        fi
        IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
        BUMP_TYPE="${{ github.event.inputs.bump-type }}"
        case "$BUMP_TYPE" in
          major)
            MAJOR=$((MAJOR+1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR+1))
            PATCH=0
            ;;
          *)
            PATCH=$((PATCH+1))
            ;;
        esac
        # Auto-bump PATCH if tag exists
        MAX_ITERATIONS=100
        ITERATION_COUNT=0
        while git rev-parse -q --verify "refs/tags/v$MAJOR.$MINOR.$PATCH" >/dev/null; do
          PATCH=$((PATCH+1))
          ITERATION_COUNT=$((ITERATION_COUNT+1))
          if [ "$ITERATION_COUNT" -ge "$MAX_ITERATIONS" ]; then
            echo "Error: Maximum iteration limit reached while bumping PATCH version." >&2
            exit 1
          fi
        done
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        if grep -q '<Version>' "$PROJECT_FILE"; then
          sed -i "s|<Version>.*</Version>|<Version>$NEW_VERSION</Version>|" "$PROJECT_FILE"
        else
          # Insert <Version> after <Company> or at the end of the first <PropertyGroup>
          awk -v ver="$NEW_VERSION" '/<Company>/{print; print "    <Version>"ver"</Version>"; next}1' "$PROJECT_FILE" > tmp && mv tmp "$PROJECT_FILE"
        fi
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        # Remove old .nupkg files in the nupkg directory
        NUPKG_DIR="$(dirname $PROJECT_FILE)/nupkg"
        if [ -d "$NUPKG_DIR" ]; then
          find "$NUPKG_DIR" -name '*.nupkg' -exec rm {} +
        fi
    - name: Commit version bump and tag
      run: |
        set -e
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git add src/*.csproj
        git commit -m "Bump version to v${{ steps.bump_version.outputs.new_version }}" || echo "No changes to commit"
        git tag v${{ steps.bump_version.outputs.new_version }}
        RELEASE_BRANCH="release/v${{ steps.bump_version.outputs.new_version }}"
        git checkout -b "$RELEASE_BRANCH"
        git push --force-with-lease origin "$RELEASE_BRANCH"
        git push origin v${{ steps.bump_version.outputs.new_version }}

