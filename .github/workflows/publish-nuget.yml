# This workflow publishes a NuGet package when a new version tag is pushed
# For more information see: https://docs.github.com/en/actions/publishing-packages/publishing-packages-to-nuget

name: Publish NuGet

permissions:
  contents: read
  packages: write

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
      - name: Restore dependencies
        run: dotnet restore
        working-directory: src/BlazorJsManager
      - name: Build
        run: dotnet build --no-restore --configuration Release
        working-directory: src/BlazorJsManager
      - name: Pack
        run: dotnet pack --no-build --configuration Release --output ./nupkg
        working-directory: src/BlazorJsManager
      - name: Publish to NuGet
        run: dotnet nuget push ./nupkg/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
        working-directory: src/BlazorJsManager
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
          prerelease: false
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          body: Automated release for ${{ github.ref_name }}
          draft: false
          prerelease: false
      - name: Compute package version
        id: vars
        run: echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV
      - name: Upload Nupkg to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: src/BlazorJsManager/nupkg/BlazorJsManager.${{ env.VERSION }}.nupkg
          asset_name: BlazorJsManager.${{ env.VERSION }}.nupkg
          asset_content_type: application/octet-stream
      - name: Merge release branch onto master and push
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          RELEASE_BRANCH=$(echo ${{ github.ref_name }} | sed 's/^v//')
          git fetch origin master
          git checkout master
          git pull origin master
          git fetch origin $RELEASE_BRANCH:$RELEASE_BRANCH || true
          git merge $RELEASE_BRANCH
          git push origin master
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
